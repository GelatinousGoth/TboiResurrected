<shaders>
	 <shader name="Hot_HeatWave">
        <parameters>
            <param name="Time" type="float"/>
            <param name="Intensity" type="float"/>
            <param name="WaveSpeed" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            attribute float Time;
            attribute float Intensity;
            attribute float WaveSpeed;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
            varying float TimeOut;
            varying float IntensityOut;
            varying float WaveSpeedOut;
            uniform mat4 Transform;

            void main(void) {
                Color0 = Color;
                TexCoord0 = TexCoord;
                TimeOut = Time;
                IntensityOut = Intensity;
                WaveSpeedOut = WaveSpeed;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
        <fragment><![CDATA[#version 130
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            varying lowp float TimeOut;
            varying lowp float IntensityOut;
            varying lowp float WaveSpeedOut;
            uniform sampler2D Texture0;

            void main(void) {
                float frequency = 60.0;
                float amplitude = IntensityOut / 1000.0;
                float speed = WaveSpeedOut / 100.0;
                
                vec2 uv = TexCoord0.xy;
                float distortion = sin(uv.y * frequency + TimeOut * speed) * amplitude;

                float ratio = TimeOut * 0.001;
                uv.x += distortion * sin(ratio);
                uv.y += distortion * (1.0 - cos(ratio));
                            
                vec4 tex = Color0 * texture(Texture0, uv);
                gl_FragColor = tex;
            }
        ]]></fragment>
    </shader>
	
	<shader name="PauseScreenCompletionMarks">
		<parameters>
		</parameters>
		<vertex><![CDATA[
			attribute vec3 Position;
			attribute vec4 Color;
			attribute vec2 TexCoord;
			varying vec4 Color0;
			varying vec2 TexCoord0;
			uniform mat4 Transform;

			void main(void)
			{
				Color0 = Color;
				TexCoord0 = TexCoord;
				gl_Position = Transform * vec4(Position.xyz, 1.0);
			}
		]]></vertex>
		<fragment><![CDATA[
			varying lowp vec4 Color0;
			varying mediump vec2 TexCoord0;
			uniform sampler2D Texture0;

			void main(void)
			{
				vec4 col = texture2D(Texture0, TexCoord0);
				gl_FragColor = Color0 * col;
			}
		]]></fragment>
	</shader>
	
	<shader name="Black_Hole">
        <parameters>
            <param name="Enabled" type="float"/>
            <param name="BlackPosition" type="vec3"/>
            <param name="Time" type="float"/>
            <param name="WarpCheck" type="vec2"/>
        </parameters>

        <vertex><![CDATA[
                attribute vec3 Position; 
                attribute vec4 Color; 
                attribute vec2 TexCoord; 
                attribute vec4 RenderData; 
                attribute float Scale;

                attribute float Enabled;
                attribute vec3 BlackPosition;
                attribute float Time;
                attribute vec2 WarpCheck;
                

                varying vec4 Color0; 
                varying vec2 TexCoord0; 
                varying vec4 RenderDataOut; 
                varying float ScaleOut;

                varying float EnabledOut;
                varying vec3 BlackPositionOut;
                varying float TimeOut;
                varying float YWarping;

                uniform mat4 Transform; 

                void main(void) 
                {
                    RenderDataOut = RenderData;
                    ScaleOut = Scale;           // Passing data to fragment shader
                    Color0 = Color;
                    TexCoord0 = TexCoord;
                    gl_Position = Transform * vec4(Position.xyz, 1.0);

                    if (Enabled > 0.0) {
                        
                        EnabledOut = Enabled;                                                               // Passing data to fragment shader
                        TimeOut = Time;                                                                     // Passing data to fragment shader
                        
                        vec4 TargetPos;

                        TargetPos.xy = (BlackPosition.xy / RenderData.zw) * Scale;
                        TargetPos.zw =  (BlackPosition.zy / RenderData.zw) * Scale;
                        BlackPositionOut = vec3(TargetPos.xy, distance(TargetPos.xy, TargetPos.zw));        // Passing data to fragment shader
                        
                        vec2 WarpChecker = (WarpCheck.xy / RenderData.zw) * Scale;
                        float xDistance = distance(vec2(WarpChecker.x, TargetPos.y), TargetPos.xy);
                        float yDistance = distance(vec2(TargetPos.x, WarpChecker.y), TargetPos.xy);
                        YWarping = xDistance / yDistance;                                                   // Passing data to fragment shader
                    }
                }

        ]]></vertex>

        <fragment><![CDATA[
            varying vec4 Color0; 
            varying vec2 TexCoord0; 
            varying vec4 RenderDataOut;
            varying float ScaleOut; 

            varying float EnabledOut; 
            varying vec3 BlackPositionOut;
            varying float TimeOut; 
            varying float YWarping;

            uniform sampler2D Texture0; 

            float warpedDistance(vec2 a, vec2 b) {
                vec2 diff = a - b;
                float distanceSquared = (diff.x * diff.x) + (diff.y * diff.y * YWarping * YWarping);
                return sqrt(distanceSquared);
            }

            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);

                if (EnabledOut > 0.0){
                    float dist = warpedDistance(TexCoord0.xy, BlackPositionOut.xy);
                    if (dist < 0.035 * TimeOut){
                        Color.r = 0.0;
                        Color.g = 0.0;
                        Color.b = 0.0;
                    }
                }

                gl_FragColor = Color;
            }
        ]]></fragment>

    </shader>
	
	<shader name="EmptyShader">
        <parameters>
<!--			<param name="PlayerPos" type="vec2"/> -->
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;                                        
            attribute vec4 Color;                                           
            attribute vec2 TexCoord;                                        
            attribute vec4 RenderData;                                                                  
            attribute float Scale;
            varying vec4 Color0;                                            
            varying vec2 TexCoord0;                                     
            varying vec4 RenderDataOut; 
            varying float ScaleOut;
//			attribute vec2 PlayerPos;
//			varying vec2 PlayerPosOut;
            uniform mat4 Transform;                                     
            void main(void)                                             
            {                                                               
                RenderDataOut = RenderData;                             
                ScaleOut = Scale;         // Passing data to fragment shader 
				
//				PlayerPosOut = PlayerPos;
				
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);          
            }
        ]]></vertex>
        <fragment><![CDATA[
            varying lowp vec4 Color0;  			
            varying mediump vec2 TexCoord0;  			
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
//			varying lowp vec2 PlayerPosOut;
			
            uniform sampler2D Texture0;                       

            void main(void)                                             
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);			
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>
</shaders>
